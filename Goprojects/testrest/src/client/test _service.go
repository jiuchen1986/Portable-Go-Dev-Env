// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "TEST REST API": Test Service Resource Client
//
// Command:
// $ goagen
// --design=design
// --out=$(GOPATH)/src
// --version=v1.3.0

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// LocalServiceTestServicePath computes a request path to the local service action of Test Service.
func LocalServiceTestServicePath(svcLo string) string {
	param0 := svcLo

	return fmt.Sprintf("/api/%s/", param0)
}

// return the local service
func (c *Client) LocalServiceTestService(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewLocalServiceTestServiceRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewLocalServiceTestServiceRequest create the request corresponding to the local service action endpoint of the Test Service resource.
func (c *Client) NewLocalServiceTestServiceRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ServiceChainTestServicePath computes a request path to the service chain action of Test Service.
func ServiceChainTestServicePath(svcLo string, svcTo string, svcOther string) string {
	param0 := svcLo
	param1 := svcTo
	param2 := svcOther

	return fmt.Sprintf("/api/%s/%s/%s", param0, param1, param2)
}

// follow the service chain to the next service
func (c *Client) ServiceChainTestService(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewServiceChainTestServiceRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewServiceChainTestServiceRequest create the request corresponding to the service chain action endpoint of the Test Service resource.
func (c *Client) NewServiceChainTestServiceRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
