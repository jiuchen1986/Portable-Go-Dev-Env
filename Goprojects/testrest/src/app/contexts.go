// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "TEST REST API": Application Contexts
//
// Command:
// $ goagen
// --design=design
// --out=$(GOPATH)/src
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// LocalServiceTestServiceContext provides the TestService local_service action context.
type LocalServiceTestServiceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SvcLo string
}

// NewLocalServiceTestServiceContext parses the incoming request URL and body, performs validations and creates the
// context used by the TestService controller local_service action.
func NewLocalServiceTestServiceContext(ctx context.Context, r *http.Request, service *goa.Service) (*LocalServiceTestServiceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LocalServiceTestServiceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSvcLo := req.Params["svcLo"]
	if len(paramSvcLo) > 0 {
		rawSvcLo := paramSvcLo[0]
		rctx.SvcLo = rawSvcLo
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *LocalServiceTestServiceContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotFound sends a HTTP response with status code 404.
func (ctx *LocalServiceTestServiceContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ServiceChainTestServiceContext provides the TestService service_chain action context.
type ServiceChainTestServiceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SvcLo    string
	SvcOther string
}

// NewServiceChainTestServiceContext parses the incoming request URL and body, performs validations and creates the
// context used by the TestService controller service_chain action.
func NewServiceChainTestServiceContext(ctx context.Context, r *http.Request, service *goa.Service) (*ServiceChainTestServiceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ServiceChainTestServiceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSvcLo := req.Params["svcLo"]
	if len(paramSvcLo) > 0 {
		rawSvcLo := paramSvcLo[0]
		rctx.SvcLo = rawSvcLo
	}
	paramSvcOther := req.Params["svcOther"]
	if len(paramSvcOther) > 0 {
		rawSvcOther := paramSvcOther[0]
		rctx.SvcOther = rawSvcOther
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ServiceChainTestServiceContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ServiceChainTestServiceContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
